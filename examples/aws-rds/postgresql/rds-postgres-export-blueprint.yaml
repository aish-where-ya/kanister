apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: rds-postgres-export-bp
actions:
  backup:
    kind: ""
    name: ""
    outputArtifacts:
      backupInfo:
        keyValue:
          allocatedStorage: '{{ .Phases.createSnapshot.Output.allocatedStorage }}'
          instanceID: '{{ .Phases.createSnapshot.Output.instanceID }}'
          securityGroupID: '{{ .Phases.createSnapshot.Output.securityGroupID }}'
          snapshotID: '{{ .Phases.createSnapshot.Output.snapshotID }}'
    phases:
    - args:
        instanceID: '{{ index .Object.data "postgres.instanceid"}}'
      func: CreateRDSSnapshot
      name: createSnapshot
  delete:
    inputArtifactNames:
    - backupInfo
    kind: ""
    name: ""
    phases:
    - args:
        snapshotID: '{{ .ArtifactsIn.backupInfo.KeyValue.snapshotID }}'
      func: DeleteRDSSnapshot
      name: deleteSnapshot
  deleteFromExport:
    inputArtifactNames:
    - exportInfo
    kind: ""
    name: ""
    phases:
    - args:
        command:
        - bash
        - -o
        - pipefail
        - -o
        - errexit
        - -c
        - s3path='test-postgresql-instance/postgres/{{ .ArtifactsIn.exportInfo.KeyValue.backupID
          }}' && kando location delete --profile '{{ toJson .Profile }}' --path ${s3path}
        image: ghcr.io/kanisterio/kanister-tools:0.78.0
        namespace: '{{ .Namespace.Name }}'
      func: KubeTask
      name: deleteBackup
  export:
    inputArtifactNames:
    - backupInfo
    kind: ""
    name: ""
    outputArtifacts:
      exportInfo:
        keyValue:
          backupID: '{{ .Phases.exportSnapshot.Output.backupID }}'
          instanceID: '{{ .ArtifactsIn.backupInfo.KeyValue.instanceID }}'
          securityGroupID: '{{ .ArtifactsIn.backupInfo.KeyValue.securityGroupID }}'
    phases:
    - args:
        backupArtifactPrefix: test-postgresql-instance/postgres
        databases: '{{ index .Object.data "postgres.databases" }}'
        dbEngine: PostgreSQL
        instanceID: '{{ .ArtifactsIn.backupInfo.KeyValue.instanceID }}'
        namespace: '{{ .Object.metadata.namespace }}'
        password: '{{ index .Phases.exportSnapshot.Secrets.dbsecret.Data "password"
          | toString }}'
        securityGroupID: '{{ .ArtifactsIn.backupInfo.KeyValue.securityGroupID }}'
        snapshotID: '{{ .ArtifactsIn.backupInfo.KeyValue.snapshotID }}'
        username: '{{ index .Phases.exportSnapshot.Secrets.dbsecret.Data "username"
          | toString }}'
      func: ExportRDSSnapshotToLocation
      name: exportSnapshot
      objects:
        dbsecret:
          apiVersion: ""
          group: ""
          kind: Secret
          name: '{{ index .Object.data "postgres.secret" }}'
          namespace: '{{ .Object.metadata.namespace }}'
          resource: ""
  restore:
    inputArtifactNames:
    - backupInfo
    kind: ""
    name: ""
    phases:
    - args:
        instanceID: '{{ .ArtifactsIn.backupInfo.KeyValue.instanceID }}'
        securityGroupID: '{{ .ArtifactsIn.backupInfo.KeyValue.securityGroupID }}'
        snapshotID: '{{ .ArtifactsIn.backupInfo.KeyValue.snapshotID }}'
      func: RestoreRDSSnapshot
      name: restoreSnapshots
  restorefromexport:
    inputArtifactNames:
    - exportInfo
    kind: ""
    name: ""
    phases:
    - func: KubeTask
      name: exportSnapshot
      objects:
        dbsecret:
          apiVersion: ""
          group: ""
          kind: Secret
          name: '{{ index .Object.data "postgres.secret" }}'
          namespace: '{{ .Object.metadata.namespace }}'
          resource: ""
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.78.0
        namespace: '{{ .Object.metadata.namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='{{ index .Object.data "export.host" }}'
          export PGUSER='{{ index .Phases.exportSnapshot.Secrets.dbsecret.Data "username" | toString }}'
          export PGPASSWORD='{{ index .Phases.exportSnapshot.Secrets.dbsecret.Data "password" | toString }}'
          export backup_file_path='test-postgresql-instance/postgres/{{ .ArtifactsIn.exportInfo.KeyValue.backupID}}'
          kando location pull --profile '{{ toJson .Profile }}' --path ${backup_file_path} - | gunzip -c -f | psql -q -U "${PGUSER}" postgres



# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: dbconfig
#   namespace: rds-app
# data:
#   postgres.instanceid:       # instanceid of of the database created in RDS
#   postgres.host:             # Endpoint of RDS Instance
#   postgres.databases: |       # databases to take backup of
#     - postgres
#   postgres.secret: dbcreds    # name of K8s secret in the same namespace
#   export.host: # hostname where database needs to be restored
#   export.port: # port 
